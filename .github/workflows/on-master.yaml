name: Build & Push

on:
  push:
    branches:
      - master
      - cicd

jobs:
  build:
    strategy:
      matrix:
        network: [ACALA, NODLE]
    env:
      ACALA_REACT_APP_OMNI_SERVER_ENDPOINT: "http://api.prod.nodleprotocol.io/graphql"
      ACALA_REACT_APP_OMNI_WS_ENDPOINT: "ws://api.prod.nodleprotocol.io/graphql"
      ACALA_REACT_APP_OMNI_SS58_FORMAT: 37
      ACALA_REACT_APP_GRAPHQL_ENDPOINT: "http://localhost:4000"
      ACALA_REACT_APP_PRIMARY_COLOR: "steelblue"
      NODLE_REACT_APP_OMNI_SERVER_ENDPOINT: "http://api.prod.nodleprotocol.io/graphql-test"
      NODLE_REACT_APP_OMNI_WS_ENDPOINT: "ws://api.prod.nodleprotocol.io/graphql-test"
      NODLE_REACT_APP_OMNI_SS58_FORMAT: 38
      NODLE_REACT_APP_GRAPHQL_ENDPOINT: "http://localhost:5000"
      NODLE_REACT_APP_PRIMARY_COLOR: "steelgreen"
    name: Run docker build
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{steps.vars.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
      - name: Get the version
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_SHA:0:7})
      - name: Create & View env file
      - if: ${{ matrix.network }} == 'ACALA'
        run: |
          cat << EOF > .env-${{ matrix.network }}
          REACT_APP_OMNI_SERVER_ENDPOINT=${{ env.ACALA_REACT_APP_OMNI_SERVER_ENDPOINT }}
          REACT_APP_OMNI_WS_ENDPOINT=${{ env.ACALA_REACT_APP_OMNI_WS_ENDPOINT }}
          REACT_APP_OMNI_SS58_FORMAT=${{ env.ACALA_REACT_APP_OMNI_SS58_FORMAT }}
          REACT_APP_GRAPHQL_ENDPOINT=${{ env.ACALA_REACT_APP_GRAPHQL_ENDPOINT }}
          REACT_APP_PRIMARY_COLOR=${{ env.ACALA_REACT_APP_PRIMARY_COLOR }}
          EOF
      - if: ${{ matrix.network }} == 'NODLE'
        run: |
          cat << EOF > .env-${{ matrix.network }}
          REACT_APP_OMNI_SERVER_ENDPOINT=${{ env.NODLE_REACT_APP_OMNI_SERVER_ENDPOINT }}
          REACT_APP_OMNI_WS_ENDPOINT=${{ env.NODLE_REACT_APP_OMNI_WS_ENDPOINT }}
          REACT_APP_OMNI_SS58_FORMAT=${{ env.NODLE_REACT_APP_OMNI_SS58_FORMAT }}
          REACT_APP_GRAPHQL_ENDPOINT=${{ env.NODLE_REACT_APP_GRAPHQL_ENDPOINT }}
          REACT_APP_PRIMARY_COLOR=${{ env.NODLE_REACT_APP_PRIMARY_COLOR }}
          EOF
      - name: Build the Docker image ${{ matrix.network }}
        run: |
          docker build -t dev-omni-front:${{steps.vars.outputs.tag}} .
      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: us-east-1
          image: dev-omni-front:${{steps.vars.outputs.tag}}

  deploy:
    name: Run helm upgrade
    runs-on: ubuntu-latest
    needs: [build]
    env:
      PRIVATE_REGISTRY: "195973352180.dkr.ecr.us-east-1.amazonaws.com"
      # ingress
      HOST: "acala.demo.omnitech.one"
      CERTIFICATE_ARN: "arn:aws:acm:us-east-1:195973352180:certificate/10f085d3-d873-4e80-81f5-d67eced8da13"
    steps:
      - uses: actions/checkout@v2
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Create & View env file
        id: create-env
        run: |
          cat << EOF > .env.yaml
          {
            "ingress": {
              "host": "${{ env.HOST }}",
              "certificateArn": "${{ env.CERTIFICATE_ARN }}"
            }
          }
          EOF
      - name: Helm deploy ${{ matrix.network }}
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_DEV }}
        with:
          plugins: |
            https://github.com/jkroepke/helm-secrets
          command: aws ecr get-login-password --region us-east-1 | helm registry login --username AWS --password-stdin ${{env.PRIVATE_REGISTRY}} && kubectl get pods && helm ls && helm upgrade helm-omni-front -i --atomic -f .env.yaml oci://${{env.PRIVATE_REGISTRY}}/helm-omni-front --version 0.1.0 --set=omniFront.image.repository=${{env.PRIVATE_REGISTRY}}/dev-omni-front,omniFront.image.tag=${{needs.build.outputs.docker_tag}} && helm ls && kubectl get pods
